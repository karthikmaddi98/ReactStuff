//Emmet - It generates some code for us in VS code

Things Learned so far:

CreateElement
CreateRoot
render

All above are ReactElement(Object) => HTML, Browser Undertsnds

git init
git branch -M main
git 



npm init -> initializes pakages.json

npm install -D parcel (Web Handler)

Two types for packages (Dev and Normal Dependencies)

Dev - Requires for Development phase
Normal - Production (Mostly)

-D: Development install pcakage

^: caret, it will basically update the versions to new update automatically if comes

^ - For Minor updates
~ - For Major Updates


ex: "parcel": "^2.12.0", it can update to latest versions automatically.

package-lock.json - locks exact version of every package comes/installs

Why Node-Modules is so heavy, bcz each packages has its own dependencies and that may have some some dependencies, so this is called tansitive dependcies

If we have pacakage.json, we can re-install all node modules. so need need to push them into github. 

How? npm install package.json or npm install

igniting the parcel

npx parcel index.html -- Executed a bundler and given us a localhost

npx - Executing the package, npm executor

CDN links are not preferred way to import react bcz everytime it should make a network call to cdn network(unpkg), so better option is to install via npm and add it to package.json

npm install react & npm i react-dom  {i => install}


npx parcel build index.html -> it will throw an error as package.json has main as App.js which will conflict with index.html, so try to remove that.

above cmd geretates 3 files(.html, .cc & .js) and it bundles all files into 3.. it is basically a production ready code/file/build..which is highly optimizes

https://browserslist.dev/?q=bGFzdCAyIHZlcnNpb25z

<body>

    <div id="start">
        <h1>Hello World The Direct Way!!</h1>  //Direct way of writing code
        <script>
             const start_heading = document.createElement("h1");   
             start_heading.innerHTML = "Hello World from JS!!!";  //using JS 
 
             const start =  document.getElementById("start");
             start.appendChild(start_heading);
         </script>    
    </div>
                                        //Using React or JSX
    <div id="root">
        
    </div>
    <script type="module" src="./App.js">
    </script>
</body>


const parent = React.createElement(
    "div",
    {id: "parent"},
    [
        React.createElement(
            "div", {id: "child"},
            [
                React.createElement("h1", {}, "Direct Div creation in App.js!!"),
                React.createElement("h2",{},"Array of Children!!")
            ]
        ),
        React.createElement(
            "div", {id: "child2"},
            [
                React.createElement("h1", {}, "Div2 Data"),
                React.createElement("h2",{},"Array of Children in Div2!!")
            ]
        )
    ]
);


// const heading = React.createElement(
//     "h1", 
//     {id: "heading"}, 
//     "Hello World from React!!"
// );

console.log(parent);

const root = ReactDOM.createRoot(document.getElementById("root"));

//console.log(root);
root.render(parent); 


_____________________________________________________________________________________________________________________________



//React.createElement => ReactElement => JS Object => HTMLElement(render)

// React Way 

// const heading = React.createElement("h1", {id : "heading"}, "Hello World!!");
// console.log(heading);
// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(heading);

//JSX - is not HTML in JS, its a HTML or XML like syntax
//JSX code is transpiled (converted) before reaches to JS Engine by Parcel -> Babel
//JSX => React.createElement => ReactElement => JS Object => HTMLElement(render)
//Babel is converting JSX to React.createElement

// React Element
const jsxheading = (
        <h1 className="root" tabIndex="100"> 
        Namaste World using JSX
        </h1>
        );

// React Component are two types
// Class based components - Old way of writing code
// Functional components - New way of writing code

//React Functional Component and start it with capital letter or it throws an error
const RE = <span>React Element</span>

const Title = function () { 
    return (
    <h2 className="root" tabIndex="100"> 
    {RE}

    Namaste World using JSX compoenent inside Heading Component
    </h2>
    )
};

const number = 10000;f

const HeadingComponent = () => (
    <div id="container">
        <Title />
        <h2>{number}</h2>
        <h2>{100 + 404}</h2>
        {jsxheading}
      <h1 className="heading">Namaster World from Functional Component</h1>
    </div>
);

// const HeadingComponent = () => <h1>Namaster World from Functional Component</h1>;

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render
root.render(<HeadingComponent />);



